{
  "deepdive": {
    "calibration": {
      "holdout_fraction": 0.25
    },
    "db": {
      "default": {
        "dbname": "deepdive_spouse_pranaab",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/deepdive_spouse_pranaab",
        "user": "pranaab"
      }
    },
    "extraction": {
      "extractors": {
        "ext_has_spouse": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_spouse\"\n\tdeepdive sql 'INSERT INTO has_spouse SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM spouse_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_resolved"
          ],
          "input_relations": [
            "spouse_label_resolved"
          ],
          "output_relation": "has_spouse",
          "style": "cmd_extractor"
        },
        "ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor"
        },
        "ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py"
        },
        "ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor"
        },
        "ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py"
        },
        "ext_spouse_label_by_supervise": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.p1_id AS \"spouse_candidate.R0.p1_id\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.p2_id AS \"spouse_candidate.R0.p2_id\", R2.begin_index AS \"person_mention.R2.begin_index\", R2.end_index AS \"person_mention.R2.end_index\", R1.doc_id AS \"person_mention.R1.doc_id\", R1.sentence_index AS \"person_mention.R1.sentence_index\", R3.sentence_text AS \"sentences.R3.sentence_text\", R3.tokens AS \"sentences.R3.tokens\", R3.lemmas AS \"sentences.R3.lemmas\", R3.pos_tags AS \"sentences.R3.pos_tags\", R3.ner_tags AS \"sentences.R3.ner_tags\", R3.dep_types AS \"sentences.R3.dep_types\", R3.dep_tokens AS \"sentences.R3.dep_tokens\"\nFROM spouse_candidate R0, person_mention R1, person_mention R2, sentences R3\n        WHERE R1.mention_id = R0.p1_id  AND R2.mention_id = R0.p2_id  AND R3.doc_id = R1.doc_id  AND R3.sentence_index = R1.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "spouse_candidate",
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_label",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/supervise_spouse.py"
        },
        "ext_spouse_label_resolved": {
          "cmd": "\n\n\tdeepdive create view spouse_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM spouse_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_by_supervise"
          ],
          "input_relations": [
            "spouse_label"
          ],
          "output_relation": "spouse_label_resolved",
          "style": "cmd_extractor"
        }
      }
    },
    "inference": {
      "factors": {
        "inf1_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3\n        WHERE R1.p1_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id  AND R3.p1_id = R0.p1_id  AND R3.p2_id = R1.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "-1.0"
        },
        "inf_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2\n        WHERE R1.p1_id = R0.p2_id  AND R1.p2_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "3.0"
        },
        "inf_istrue_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_spouse_feature_by_extract_spouse_features"
          ],
          "function": "Imply(has_spouse.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate",
            "spouse_feature"
          ],
          "weight": "?(dd_weight_column_0)"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_num_people",
          "ext_has_spouse",
          "ext_spouse_label_resolved",
          "ext_person_mention_by_map_person_mention",
          "ext_spouse_label_by_supervise",
          "ext_spouse_feature_by_extract_spouse_features",
          "ext_spouse_candidate",
          "inf_istrue_has_spouse",
          "inf_imply_has_spouse_has_spouse",
          "inf1_imply_has_spouse_has_spouse"
        ],
        "extraction": [
          "ext_num_people",
          "ext_has_spouse",
          "ext_spouse_label_resolved",
          "ext_person_mention_by_map_person_mention",
          "ext_spouse_label_by_supervise",
          "ext_spouse_feature_by_extract_spouse_features",
          "ext_spouse_candidate"
        ],
        "inference": [
          "inf_istrue_has_spouse",
          "inf_imply_has_spouse_has_spouse",
          "inf1_imply_has_spouse_has_spouse"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "articles": {
          "columns": {
            "content": {
              "index": 1,
              "type": "text"
            },
            "id": {
              "index": 0,
              "type": "text"
            }
          }
        },
        "has_spouse": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "num_people": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "person_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "spouse_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_feature": {
          "columns": {
            "feature": {
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "spouse_label": {
          "columns": {
            "label": {
              "index": 2,
              "type": "int"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            },
            "rule_id": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_label_resolved": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        }
      },
      "variables": {
        "has_spouse": {
          "label": "Boolean"
        }
      }
    }
  },
  "deepdive_": {
    "calibration": {
      "holdout_fraction": 0.25
    },
    "db": {
      "default": {
        "dbname": "deepdive_spouse_pranaab",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/deepdive_spouse_pranaab",
        "user": "pranaab"
      }
    },
    "extraction": {
      "extractors": {
        "process/ext_has_spouse": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_spouse\"\n\tdeepdive sql 'INSERT INTO has_spouse SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM spouse_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_resolved"
          ],
          "input_relations": [
            "spouse_label_resolved"
          ],
          "output_relation": "has_spouse",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_spouse_label_resolved"
          ],
          "input_": [
            "data/spouse_label_resolved"
          ],
          "output_": "data/has_spouse"
        },
        "process/ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention"
          ],
          "output_": "data/num_people"
        },
        "process/ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py",
          "dependencies_": [],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/person_mention"
        },
        "process/ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_num_people",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/num_people",
            "data/person_mention"
          ],
          "output_": "data/spouse_candidate"
        },
        "process/ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_feature"
        },
        "process/ext_spouse_label_by_supervise": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.p1_id AS \"spouse_candidate.R0.p1_id\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.p2_id AS \"spouse_candidate.R0.p2_id\", R2.begin_index AS \"person_mention.R2.begin_index\", R2.end_index AS \"person_mention.R2.end_index\", R1.doc_id AS \"person_mention.R1.doc_id\", R1.sentence_index AS \"person_mention.R1.sentence_index\", R3.sentence_text AS \"sentences.R3.sentence_text\", R3.tokens AS \"sentences.R3.tokens\", R3.lemmas AS \"sentences.R3.lemmas\", R3.pos_tags AS \"sentences.R3.pos_tags\", R3.ner_tags AS \"sentences.R3.ner_tags\", R3.dep_types AS \"sentences.R3.dep_types\", R3.dep_tokens AS \"sentences.R3.dep_tokens\"\nFROM spouse_candidate R0, person_mention R1, person_mention R2, sentences R3\n        WHERE R1.mention_id = R0.p1_id  AND R2.mention_id = R0.p2_id  AND R3.doc_id = R1.doc_id  AND R3.sentence_index = R1.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "spouse_candidate",
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_label",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/supervise_spouse.py",
          "dependencies_": [
            "process/ext_spouse_candidate",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/spouse_candidate",
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_label"
        },
        "process/ext_spouse_label_resolved": {
          "cmd": "\n\n\tdeepdive create view spouse_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM spouse_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_by_supervise"
          ],
          "input_relations": [
            "spouse_label"
          ],
          "output_relation": "spouse_label_resolved",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_spouse_label_by_supervise"
          ],
          "input_": [
            "data/spouse_label"
          ],
          "output_": "data/spouse_label_resolved"
        }
      }
    },
    "inference": {
      "factors": {
        "factor/inf1_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3\n        WHERE R1.p1_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id  AND R3.p1_id = R0.p1_id  AND R3.p2_id = R1.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "-1.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null
        },
        "factor/inf_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2\n        WHERE R1.p1_id = R0.p2_id  AND R1.p2_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "3.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null
        },
        "factor/inf_istrue_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_spouse_feature_by_extract_spouse_features"
          ],
          "function": "Imply(has_spouse.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate",
            "spouse_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_spouse_candidate",
            "process/ext_spouse_feature_by_extract_spouse_features"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate",
            "data/spouse_feature"
          ],
          "output_": null
        }
      },
      "factors_": [
        {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3\n        WHERE R1.p1_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id  AND R3.p1_id = R0.p1_id  AND R3.p2_id = R1.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "-1.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null,
          "factorName": "inf1_imply_has_spouse_has_spouse",
          "factorsTable": "dd_factors_inf1_imply_has_spouse_has_spouse",
          "weightsTable": "dd_weights_inf1_imply_has_spouse_has_spouse",
          "weight_": {
            "is_fixed": true,
            "params": [],
            "init_value": -1
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              },
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R1.label",
                "columnPrefix": "has_spouse.R1.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R1.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 1
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf1_imply_has_spouse_has_spouse"
        },
        {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2\n        WHERE R1.p1_id = R0.p2_id  AND R1.p2_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "3.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null,
          "factorName": "inf_imply_has_spouse_has_spouse",
          "factorsTable": "dd_factors_inf_imply_has_spouse_has_spouse",
          "weightsTable": "dd_weights_inf_imply_has_spouse_has_spouse",
          "weight_": {
            "is_fixed": true,
            "params": [],
            "init_value": 3
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              },
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R1.label",
                "columnPrefix": "has_spouse.R1.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R1.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 1
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_imply_has_spouse_has_spouse"
        },
        {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_spouse_feature_by_extract_spouse_features"
          ],
          "function": "Imply(has_spouse.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate",
            "spouse_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_spouse_candidate",
            "process/ext_spouse_feature_by_extract_spouse_features"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate",
            "data/spouse_feature"
          ],
          "output_": null,
          "factorName": "inf_istrue_has_spouse",
          "factorsTable": "dd_factors_inf_istrue_has_spouse",
          "weightsTable": "dd_weights_inf_istrue_has_spouse",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_has_spouse"
        }
      ],
      "factors_byName": {
        "inf1_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3\n        WHERE R1.p1_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id  AND R3.p1_id = R0.p1_id  AND R3.p2_id = R1.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "-1.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null,
          "factorName": "inf1_imply_has_spouse_has_spouse",
          "factorsTable": "dd_factors_inf1_imply_has_spouse_has_spouse",
          "weightsTable": "dd_weights_inf1_imply_has_spouse_has_spouse",
          "weight_": {
            "is_fixed": true,
            "params": [],
            "init_value": -1
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              },
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R1.label",
                "columnPrefix": "has_spouse.R1.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R1.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 1
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf1_imply_has_spouse_has_spouse"
        },
        "inf_imply_has_spouse_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate"
          ],
          "function": "Imply(has_spouse.R0.label, has_spouse.R1.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2\n        WHERE R1.p1_id = R0.p2_id  AND R1.p2_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate"
          ],
          "weight": "3.0",
          "dependencies_": [
            "process/ext_spouse_candidate"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate"
          ],
          "output_": null,
          "factorName": "inf_imply_has_spouse_has_spouse",
          "factorsTable": "dd_factors_inf_imply_has_spouse_has_spouse",
          "weightsTable": "dd_weights_inf_imply_has_spouse_has_spouse",
          "weight_": {
            "is_fixed": true,
            "params": [],
            "init_value": 3
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              },
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R1.label",
                "columnPrefix": "has_spouse.R1.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R1.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 1
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_imply_has_spouse_has_spouse"
        },
        "inf_istrue_has_spouse": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_spouse_feature_by_extract_spouse_features"
          ],
          "function": "Imply(has_spouse.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_spouse.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_spouse",
            "spouse_candidate",
            "spouse_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_spouse_candidate",
            "process/ext_spouse_feature_by_extract_spouse_features"
          ],
          "input_": [
            "data/has_spouse",
            "data/spouse_candidate",
            "data/spouse_feature"
          ],
          "output_": null,
          "factorName": "inf_istrue_has_spouse",
          "factorsTable": "dd_factors_inf_istrue_has_spouse",
          "weightsTable": "dd_weights_inf_istrue_has_spouse",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_spouse.R0.label",
                "columnPrefix": "has_spouse.R0.",
                "name": "has_spouse",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_spouse.R0.id",
                "schema": {
                  "variableName": "has_spouse",
                  "variablesTable": "has_spouse",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_spouse",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_has_spouse"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "pipeline/endtoend": [
          "process/ext_num_people",
          "process/ext_has_spouse",
          "process/ext_spouse_label_resolved",
          "process/ext_person_mention_by_map_person_mention",
          "process/ext_spouse_label_by_supervise",
          "process/ext_spouse_feature_by_extract_spouse_features",
          "process/ext_spouse_candidate",
          "factor/inf_istrue_has_spouse",
          "factor/inf_imply_has_spouse_has_spouse",
          "factor/inf1_imply_has_spouse_has_spouse"
        ],
        "pipeline/extraction": [
          "process/ext_num_people",
          "process/ext_has_spouse",
          "process/ext_spouse_label_resolved",
          "process/ext_person_mention_by_map_person_mention",
          "process/ext_spouse_label_by_supervise",
          "process/ext_spouse_feature_by_extract_spouse_features",
          "process/ext_spouse_candidate"
        ],
        "pipeline/inference": [
          "factor/inf_istrue_has_spouse",
          "factor/inf_imply_has_spouse_has_spouse",
          "factor/inf1_imply_has_spouse_has_spouse"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "articles": {
          "columns": {
            "content": {
              "index": 1,
              "type": "text"
            },
            "id": {
              "index": 0,
              "type": "text"
            }
          }
        },
        "has_spouse": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "num_people": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "person_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "spouse_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_feature": {
          "columns": {
            "feature": {
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "spouse_label": {
          "columns": {
            "label": {
              "index": 2,
              "type": "int"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            },
            "rule_id": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_label_resolved": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        }
      },
      "variables": {
        "has_spouse": {
          "label": "Boolean"
        }
      },
      "variables_": [
        {
          "variableName": "has_spouse",
          "variablesTable": "has_spouse",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_has_spouse",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      ],
      "variables_byName": {
        "has_spouse": {
          "variableName": "has_spouse",
          "variablesTable": "has_spouse",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_has_spouse",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      }
    },
    "execution": {
      "processes": {
        "process/init/app": {
          "style": "cmd_extractor",
          "cmd": "\n        deepdive db init\n\n        cd \"$DEEPDIVE_APP\"\n        # run legacy schema.sql\n        if [[ -r schema.sql ]]; then\n            deepdive db prompt <schema.sql\n        fi\n        # run legacy init script\n        if [[ -x input/init.sh ]]; then\n            input/init.sh\n        fi\n        "
        },
        "process/init/relation/articles": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'articles' && deepdive load 'articles'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "articles",
          "output_": "data/articles"
        },
        "process/init/relation/sentences": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'sentences' && deepdive load 'sentences'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "sentences",
          "output_": "data/sentences"
        },
        "process/ext_has_spouse": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_spouse\"\n\tdeepdive sql 'INSERT INTO has_spouse SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM spouse_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_resolved"
          ],
          "input_relations": [
            "spouse_label_resolved"
          ],
          "output_relation": "has_spouse",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_spouse_label_resolved"
          ],
          "input_": [
            "data/spouse_label_resolved"
          ],
          "output_": "data/has_spouse"
        },
        "process/ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention"
          ],
          "output_": "data/num_people"
        },
        "process/ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py",
          "dependencies_": [],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/person_mention"
        },
        "process/ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_num_people",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/num_people",
            "data/person_mention"
          ],
          "output_": "data/spouse_candidate"
        },
        "process/ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_feature"
        },
        "process/ext_spouse_label_by_supervise": {
          "dependencies": [
            "ext_spouse_candidate",
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.p1_id AS \"spouse_candidate.R0.p1_id\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.p2_id AS \"spouse_candidate.R0.p2_id\", R2.begin_index AS \"person_mention.R2.begin_index\", R2.end_index AS \"person_mention.R2.end_index\", R1.doc_id AS \"person_mention.R1.doc_id\", R1.sentence_index AS \"person_mention.R1.sentence_index\", R3.sentence_text AS \"sentences.R3.sentence_text\", R3.tokens AS \"sentences.R3.tokens\", R3.lemmas AS \"sentences.R3.lemmas\", R3.pos_tags AS \"sentences.R3.pos_tags\", R3.ner_tags AS \"sentences.R3.ner_tags\", R3.dep_types AS \"sentences.R3.dep_types\", R3.dep_tokens AS \"sentences.R3.dep_tokens\"\nFROM spouse_candidate R0, person_mention R1, person_mention R2, sentences R3\n        WHERE R1.mention_id = R0.p1_id  AND R2.mention_id = R0.p2_id  AND R3.doc_id = R1.doc_id  AND R3.sentence_index = R1.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "spouse_candidate",
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_label",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/supervise_spouse.py",
          "dependencies_": [
            "process/ext_spouse_candidate",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/spouse_candidate",
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_label"
        },
        "process/ext_spouse_label_resolved": {
          "cmd": "\n\n\tdeepdive create view spouse_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM spouse_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_spouse_label_by_supervise"
          ],
          "input_relations": [
            "spouse_label"
          ],
          "output_relation": "spouse_label_resolved",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_spouse_label_by_supervise"
          ],
          "input_": [
            "data/spouse_label"
          ],
          "output_": "data/spouse_label_resolved"
        },
        "process/grounding/variable_id_partition": {
          "dependencies_": [
            "data/has_spouse"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        RANGE_BEGIN=0 \\\n        partition_id_range 'has_spouse' | {\n            # record the base\n            variableCountTotal=0\n            while read table begin excludeEnd; do\n                varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n                mkdir -p \"$varPath\"\n                cd \"$varPath\"\n                echo $begin                      >id_begin\n                echo $excludeEnd                 >id_exclude_end\n                echo $(( $excludeEnd - $begin )) >count\n                variableCountTotal=$excludeEnd\n            done\n            # record the final count\n            echo $variableCountTotal >\"$DEEPDIVE_GROUNDING_DIR\"/variable_count\n        }\n        "
        },
        "process/grounding/variable/has_spouse/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='has_spouse'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable_holdout": {
          "dependencies_": [
            "process/grounding/variable/has_spouse/assign_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        deepdive create table 'dd_graph_variables_holdout' \\\n            variable_id:BIGINT:'PRIMARY KEY' \\\n            #\n        deepdive create table 'dd_graph_variables_observation' \\\n            variable_id:BIGINT:'PRIMARY KEY' \\\n            #\n        deepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"has_spouse\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < 0.25;\n            '\n        "
        },
        "process/grounding/variable/has_spouse/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='has_spouse'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'has_spouse'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"has_spouse\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/factor/inf1_imply_has_spouse_has_spouse/materialize": {
          "dependencies_": [
            "process/grounding/variable/has_spouse/assign_id"
          ],
          "input_": [
            "data/spouse_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf1_imply_has_spouse_has_spouse' as '\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3\n        WHERE R1.p1_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id  AND R3.p1_id = R0.p1_id  AND R3.p2_id = R1.p2_id '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf1_imply_has_spouse_has_spouse' as 'SELECT true AS \"isfixed\"\n     , -1 AS \"initvalue\"\n     , -1 AS \"id\"'\n        "
        },
        "process/grounding/factor/inf_imply_has_spouse_has_spouse/materialize": {
          "dependencies_": [
            "process/grounding/variable/has_spouse/assign_id"
          ],
          "input_": [
            "data/spouse_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_imply_has_spouse_has_spouse' as '\n          SELECT R0.id AS \"has_spouse.R0.id\" , R1.id AS \"has_spouse.R1.id\" \n          FROM has_spouse R0, has_spouse R1, spouse_candidate R2\n        WHERE R1.p1_id = R0.p2_id  AND R1.p2_id = R0.p1_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_imply_has_spouse_has_spouse' as 'SELECT true AS \"isfixed\"\n     , 3 AS \"initvalue\"\n     , -1 AS \"id\"'\n        "
        },
        "process/grounding/factor/inf_istrue_has_spouse/materialize": {
          "dependencies_": [
            "process/grounding/variable/has_spouse/assign_id"
          ],
          "input_": [
            "data/spouse_candidate",
            "data/spouse_feature"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_has_spouse' as '\n          SELECT R0.id AS \"has_spouse.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_has_spouse' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_has_spouse\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/weight_id_partition": {
          "dependencies_": [
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/materialize",
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/materialize",
            "process/grounding/factor/inf_istrue_has_spouse/materialize"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        # partition the id range for weights\n        RANGE_BEGIN=0 RANGE_STEP=1 \\\n        partition_id_range 'dd_weights_inf1_imply_has_spouse_has_spouse' 'dd_weights_inf_imply_has_spouse_has_spouse' 'dd_weights_inf_istrue_has_spouse' | {\n            weightsCountTotal=0\n            while read table begin excludeEnd; do\n                factor=${table#'dd_weights_'}\n                facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/${factor}\n                mkdir -p \"$facPath\"\n                cd \"$facPath\"\n                echo $begin                      >weights_id_begin\n                echo $excludeEnd                 >weights_id_exclude_end\n                echo $(( $excludeEnd - $begin )) >weights_count\n                weightsCountTotal=$excludeEnd\n            done\n            echo $weightsCountTotal >\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights_count\n        }\n        "
        },
        "process/grounding/global_weight_table": {
          "dependencies_": [
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/materialize",
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/materialize",
            "process/grounding/factor/inf_istrue_has_spouse/materialize"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        # set up a union view for all weight tables (\"dd_graph_weights\")\n        deepdive create view 'dd_graph_weights' as '(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf1_imply_has_spouse_has_spouse-'\\'' AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf1_imply_has_spouse_has_spouse\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_imply_has_spouse_has_spouse-'\\'' AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_imply_has_spouse_has_spouse\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_has_spouse-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_has_spouse\")'\n        "
        },
        "process/grounding/factor/inf1_imply_has_spouse_has_spouse/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf1_imply_has_spouse_has_spouse'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf1_imply_has_spouse_has_spouse' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_imply_has_spouse_has_spouse/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_imply_has_spouse_has_spouse'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_imply_has_spouse_has_spouse' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_has_spouse/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_has_spouse'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_has_spouse' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf1_imply_has_spouse_has_spouse/dump": {
          "dependencies_": [
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf1_imply_has_spouse_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"has_spouse.R0.id\"\n     , \"factors\".\"has_spouse.R1.id\"\nFROM \"dd_factors_inf1_imply_has_spouse_has_spouse\" \"factors\", \"dd_weights_inf1_imply_has_spouse_has_spouse\" \"weights\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 2 original 1 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_imply_has_spouse_has_spouse/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_imply_has_spouse_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"has_spouse.R0.id\"\n     , \"factors\".\"has_spouse.R1.id\"\nFROM \"dd_factors_inf_imply_has_spouse_has_spouse\" \"factors\", \"dd_weights_inf_imply_has_spouse_has_spouse\" \"weights\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 2 original 1 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_has_spouse/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"has_spouse.R0.id\"\nFROM \"dd_factors_inf_istrue_has_spouse\" \"factors\", \"dd_weights_inf_istrue_has_spouse\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf1_imply_has_spouse_has_spouse/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf1_imply_has_spouse_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf1_imply_has_spouse_has_spouse\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf1_imply_has_spouse_has_spouse-'\\'''\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf1_imply_has_spouse_has_spouse\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_imply_has_spouse_has_spouse/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_imply_has_spouse_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_imply_has_spouse_has_spouse\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_imply_has_spouse_has_spouse-'\\'''\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_imply_has_spouse_has_spouse\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_has_spouse/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_has_spouse/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_has_spouse'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_has_spouse\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_has_spouse-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_has_spouse\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/combine_factorgraph": {
          "dependencies_": [
            "process/grounding/variable/has_spouse/dump",
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/dump",
            "process/grounding/factor/inf1_imply_has_spouse_has_spouse/dump_weights",
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/dump",
            "process/grounding/factor/inf_imply_has_spouse_has_spouse/dump_weights",
            "process/grounding/factor/inf_istrue_has_spouse/dump",
            "process/grounding/factor/inf_istrue_has_spouse/dump_weights",
            "process/grounding/global_weight_table"
          ],
          "output_": "model/factorgraph",
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        : ${DEEPDIVE_FACTORGRAPH_DIR:=\"$DEEPDIVE_APP\"/run/model/factorgraph}\n\n        # create a fresh empty directory for the new combined factor graph\n        rm -rf   \"$DEEPDIVE_FACTORGRAPH_DIR\"\n        mkdir -p \"$DEEPDIVE_FACTORGRAPH_DIR\"\n        cd \"$DEEPDIVE_FACTORGRAPH_DIR\"\n\n        # create symlinks to the grounded binaries by enumerating variables and factors\n        for v in 'has_spouse'; do\n            mkdir -p variables/\"$v\"\n            find \"$DEEPDIVE_GROUNDING_DIR\"/variable/\"$v\" \\\n                -name 'variables.part-*.bin.bz2' -exec ln -sfnv -t variables/\"$v\"/ {} + \\\n                #\n        done\n        for f in 'inf1_imply_has_spouse_has_spouse' 'inf_imply_has_spouse_has_spouse' 'inf_istrue_has_spouse'; do\n            mkdir -p {factors,weights}/\"$f\"\n            find \"$DEEPDIVE_GROUNDING_DIR\"/factor/\"$f\" \\\n                -name 'factors.part-*.bin.bz2' -exec ln -sfnv -t factors/\"$f\"/ {} + \\\n                -o \\\n                -name 'weights.part-*.bin.bz2' -exec ln -sfnv -t weights/\"$f\"/ {} + \\\n                #\n        done\n\n        # generate the metadata for the inference engine\n        {\n            # first line with counts of variables and edges in the grounded factor graph\n            cd \"$DEEPDIVE_GROUNDING_DIR\"\n            sumup() { { tr '\\n' +; echo 0; } | bc; }\n            counts=()\n            counts+=($(cat factor/weights_count))\n            # sum up the number of factors and edges\n            counts+=($(cat variable_count))\n            cd factor\n            counts+=($(find 'inf1_imply_has_spouse_has_spouse' 'inf_imply_has_spouse_has_spouse' 'inf_istrue_has_spouse' -name 'nfactors.part-*' -exec cat {} + | sumup))\n            counts+=($(find 'inf1_imply_has_spouse_has_spouse' 'inf_imply_has_spouse_has_spouse' 'inf_istrue_has_spouse' -name 'nedges.part-*'   -exec cat {} + | sumup))\n            (IFS=,; echo \"${counts[*]}\")\n            # second line with file paths\n            paths=(\"$DEEPDIVE_FACTORGRAPH_DIR\"/{weights,variables,factors,edges})\n            (IFS=,; echo \"${paths[*]}\")\n        } >meta\n        "
        },
        "process/model/learning": {
          "dependencies_": [
            "model/factorgraph"
          ],
          "output_": "model/weights",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            mkdir -p weights\n            [ -d factorgraph ] || error \"No factorgraph found\"\n            # run inference engine for learning and inference\n            flatten() { find -L \"$@\" -type f -exec pbzip2 -c -d -k {} +; }\n            sampler-dw \\\n                gibbs \\\n                -w <(flatten factorgraph/weights) \\\n                -v <(flatten factorgraph/variables) \\\n                -f <(flatten factorgraph/factors) \\\n                -m factorgraph/meta \\\n                -o weights \\\n                -l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence\n            mkdir -p probabilities\n            mv -f weights/inference_result.out.text probabilities/\n        "
        },
        "process/model/inference": {
          "dependencies_": [
            "model/factorgraph",
            "model/weights"
          ],
          "output_": "model/probabilities",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            [ -d factorgraph ] || error \"No factorgraph found\"\n            if [[ factorgraph/weights -nt probabilities/inference_result.out.text ]]; then\n                # no need to run inference unless the weights are fresher\n                # XXX this skipping may cause confusion\n                # run sampler for performing inference with given weights without learning\n                flatten() { find -L \"$@\" -type f -exec pbzip2 -c -d -k {} +; }\n                sampler-dw \\\n                    gibbs \\\n                    -w <(flatten factorgraph/weights) \\\n                    -v <(flatten factorgraph/variables) \\\n                    -f <(flatten factorgraph/factors) \\\n                    -m factorgraph/meta \\\n                    -o weights \\\n                    -l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence \\\n                    -l 0 \\\n                    #\n                mkdir -p probabilities\n                mv -f weights/inference_result.out.text probabilities/\n            fi\n        "
        },
        "process/model/load_weights": {
          "dependencies_": [
            "model/weights"
          ],
          "output_": "data/model/weights",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            # load weights to database\n            deepdive create table dd_inference_result_weights \\\n                id:BIGINT:'PRIMARY KEY' \\\n                weight:'DOUBLE PRECISION' \\\n                #\n            cat weights/inference_result.out.weights.text |\n            tr ' ' '\\t' | DEEPDIVE_LOAD_FORMAT=tsv \\\n            deepdive load dd_inference_result_weights /dev/stdin\n\n            # create views\n            deepdive create view dd_inference_result_weights_mapping as '\n                SELECT dd_graph_weights.*, dd_inference_result_weights.weight FROM\n                dd_graph_weights JOIN dd_inference_result_weights ON dd_graph_weights.id = dd_inference_result_weights.id\n                ORDER BY abs(weight) DESC\n            '\n\n            deepdive create view dd_inference_result_variables_mapped_weights as '\n                SELECT * FROM dd_inference_result_weights_mapping\n                ORDER BY abs(weight) DESC\n            '\n        "
        },
        "process/model/load_probabilities": {
          "dependencies_": [
            "model/probabilities"
          ],
          "output_": "data/model/probabilities",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            # load weights to database\n            deepdive create table dd_inference_result_variables \\\n                id:BIGINT \\\n                category:BIGINT \\\n                expectation:'DOUBLE PRECISION' \\\n                #\n            cat probabilities/inference_result.out.text |\n            tr ' ' '\\t' | DEEPDIVE_LOAD_FORMAT=tsv \\\n            deepdive load dd_inference_result_variables /dev/stdin\n\n            # create a view for each app schema variable\n            \n            deepdive create view 'has_spouse_label_inference' as '\n                SELECT has_spouse.*, mir.category, mir.expectation FROM\n                has_spouse, dd_inference_result_variables mir\n                WHERE has_spouse.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n        "
        }
      }
    }
  }
}
