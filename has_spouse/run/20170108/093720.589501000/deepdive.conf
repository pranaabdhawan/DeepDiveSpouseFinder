
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        
      }
    

      deepdive.extraction.extractors.ext_has_spouse {
        cmd: """

	deepdive create view has_spouse as 'SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, 
CASE WHEN R0.column_2 > 0 THEN true
     WHEN R0.column_2 < 0 THEN false
     ELSE NULL
END AS label
          FROM spouse_label_resolved R0
        
          '
	
        """
          output_relation: "has_spouse"
        style: "cmd_extractor"
          dependencies: [ "ext_spouse_label_resolved" ]
          input_relations: [
            spouse_label_resolved
          ]
      }
    

      deepdive.extraction.extractors.ext_spouse_candidate {
        cmd: """

	# TODO use temporary table
	deepdive create table "spouse_candidate"
	deepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS "person_mention.R1.mention_id", R1.mention_text AS "person_mention.R1.mention_text", R2.mention_id AS "person_mention.R2.mention_id", R2.mention_text AS "person_mention.R2.mention_text"
FROM num_people R0, person_mention R1, person_mention R2
        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "spouse_candidate"
        style: "cmd_extractor"
          dependencies: [ "ext_num_people" ,  "ext_person_mention_by_map_person_mention" ]
          input_relations: [
            num_people
            person_mention
          ]
      }
    

      deepdive.extraction.extractors.ext_num_people {
        cmd: """

	deepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2
FROM person_mention R0
        
        GROUP BY R0.doc_id, R0.sentence_index'
	
        """
          output_relation: "num_people"
        style: "cmd_extractor"
          dependencies: [ "ext_person_mention_by_map_person_mention" ]
          input_relations: [
            person_mention
          ]
      }
    

      deepdive.extraction.extractors.ext_spouse_label_resolved {
        cmd: """

	deepdive create view spouse_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2
FROM spouse_label R0
        
        GROUP BY R0.p1_id, R0.p2_id'
	
        """
          output_relation: "spouse_label_resolved"
        style: "cmd_extractor"
          dependencies: [ "ext_spouse_label_by_supervise" ]
          input_relations: [
            spouse_label
          ]
      }
    

        deepdive.extraction.extractors.ext_person_mention_by_map_person_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.tokens AS "sentences.R0.tokens", R0.ner_tags AS "sentences.R0.ner_tags"
FROM sentences R0
        
          """
          output_relation: "person_mention"
          udf: ${APP_HOME}"/udf/map_person_mention.py"
          style: "tsv_extractor" 
          
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_spouse_feature_by_extract_spouse_features {
          input: """ SELECT R0.mention_id AS "person_mention.R0.mention_id", R1.mention_id AS "person_mention.R1.mention_id", R0.begin_index AS "person_mention.R0.begin_index", R0.end_index AS "person_mention.R0.end_index", R1.begin_index AS "person_mention.R1.begin_index", R1.end_index AS "person_mention.R1.end_index", R0.doc_id AS "person_mention.R0.doc_id", R0.sentence_index AS "person_mention.R0.sentence_index", R2.tokens AS "sentences.R2.tokens", R2.lemmas AS "sentences.R2.lemmas", R2.pos_tags AS "sentences.R2.pos_tags", R2.ner_tags AS "sentences.R2.ner_tags", R2.dep_types AS "sentences.R2.dep_types", R2.dep_tokens AS "sentences.R2.dep_tokens"
FROM person_mention R0, person_mention R1, sentences R2
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index 
          """
          output_relation: "spouse_feature"
          udf: ${APP_HOME}"/udf/extract_spouse_features.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_person_mention_by_map_person_mention" ]
          input_relations: [
            person_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_spouse_label_by_supervise {
          input: """ SELECT R0.p1_id AS "spouse_candidate.R0.p1_id", R1.begin_index AS "person_mention.R1.begin_index", R1.end_index AS "person_mention.R1.end_index", R0.p2_id AS "spouse_candidate.R0.p2_id", R2.begin_index AS "person_mention.R2.begin_index", R2.end_index AS "person_mention.R2.end_index", R1.doc_id AS "person_mention.R1.doc_id", R1.sentence_index AS "person_mention.R1.sentence_index", R3.sentence_text AS "sentences.R3.sentence_text", R3.tokens AS "sentences.R3.tokens", R3.lemmas AS "sentences.R3.lemmas", R3.pos_tags AS "sentences.R3.pos_tags", R3.ner_tags AS "sentences.R3.ner_tags", R3.dep_types AS "sentences.R3.dep_types", R3.dep_tokens AS "sentences.R3.dep_tokens"
FROM spouse_candidate R0, person_mention R1, person_mention R2, sentences R3
        WHERE R1.mention_id = R0.p1_id  AND R2.mention_id = R0.p2_id  AND R3.doc_id = R1.doc_id  AND R3.sentence_index = R1.sentence_index 
          """
          output_relation: "spouse_label"
          udf: ${APP_HOME}"/udf/supervise_spouse.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_spouse_candidate" ,  "ext_person_mention_by_map_person_mention" ]
          input_relations: [
            spouse_candidate
            person_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_num_people
  ext_has_spouse
  ext_spouse_label_resolved
  ext_person_mention_by_map_person_mention
  ext_spouse_label_by_supervise
  ext_spouse_feature_by_extract_spouse_features
  ext_spouse_candidate
]
deepdive.pipeline.pipelines.endtoend: [
  ext_num_people
  ext_has_spouse
  ext_spouse_label_resolved
  ext_person_mention_by_map_person_mention
  ext_spouse_label_by_supervise
  ext_spouse_feature_by_extract_spouse_features
  ext_spouse_candidate
]
deepdive.calibration.holdout_fraction:0.25
deepdive.sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence"
deepdive.schema {"relations" : {"sentences" : {"columns" : {"doc_offsets" : {"type" : "int[]", "index" : 7}, "sentence_index" : {"type" : "int", "index" : 1}, "sentence_text" : {"type" : "text", "index" : 2}, "doc_id" : {"type" : "text", "index" : 0}, "ner_tags" : {"type" : "text[]", "index" : 6}, "lemmas" : {"type" : "text[]", "index" : 4}, "dep_types" : {"type" : "text[]", "index" : 8}, "tokens" : {"type" : "text[]", "index" : 3}, "pos_tags" : {"type" : "text[]", "index" : 5}, "dep_tokens" : {"type" : "int[]", "index" : 9}}}, "has_spouse" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}}}, "articles" : {"columns" : {"id" : {"type" : "text", "index" : 0}, "content" : {"type" : "text", "index" : 1}}}, "spouse_feature" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0}, "p2_id" : {"type" : "text", "index" : 1}, "feature" : {"type" : "text", "index" : 2}}}, "spouse_candidate" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0}, "p1_name" : {"type" : "text", "index" : 1}, "p2_id" : {"type" : "text", "index" : 2}, "p2_name" : {"type" : "text", "index" : 3}}}, "person_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3}, "doc_id" : {"type" : "text", "index" : 2}, "mention_text" : {"type" : "text", "index" : 1}, "end_index" : {"type" : "int", "index" : 5}, "mention_id" : {"type" : "text", "index" : 0}}}, "num_people" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "spouse_label_resolved" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "spouse_label" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0}, "p2_id" : {"type" : "text", "index" : 1}, "label" : {"type" : "int", "index" : 2}, "rule_id" : {"type" : "text", "index" : 3}}}}}
