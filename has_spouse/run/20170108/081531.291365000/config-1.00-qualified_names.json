{
  "deepdive": {
    "calibration": {
      "holdout_fraction": 0.25
    },
    "db": {
      "default": {
        "dbname": "deepdive_spouse_pranaab",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/deepdive_spouse_pranaab",
        "user": "pranaab"
      }
    },
    "extraction": {
      "extractors": {
        "ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor"
        },
        "ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py"
        },
        "ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor"
        },
        "ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_spouse_candidate",
          "ext_num_people",
          "ext_person_mention_by_map_person_mention",
          "ext_spouse_feature_by_extract_spouse_features"
        ],
        "extraction": [
          "ext_spouse_candidate",
          "ext_num_people",
          "ext_person_mention_by_map_person_mention",
          "ext_spouse_feature_by_extract_spouse_features"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "articles": {
          "columns": {
            "content": {
              "index": 1,
              "type": "text"
            },
            "id": {
              "index": 0,
              "type": "text"
            }
          }
        },
        "num_people": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "person_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "spouse_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_feature": {
          "columns": {
            "feature": {
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          }
        }
      },
      "variables": {}
    }
  },
  "deepdive_": {
    "calibration": {
      "holdout_fraction": 0.25
    },
    "db": {
      "default": {
        "dbname": "deepdive_spouse_pranaab",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/deepdive_spouse_pranaab",
        "user": "pranaab"
      }
    },
    "extraction": {
      "extractors": {
        "process/ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention"
          ],
          "output_": "data/num_people"
        },
        "process/ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py",
          "dependencies_": [],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/person_mention"
        },
        "process/ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_num_people",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/num_people",
            "data/person_mention"
          ],
          "output_": "data/spouse_candidate"
        },
        "process/ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_feature"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "pipeline/endtoend": [
          "process/ext_spouse_candidate",
          "process/ext_num_people",
          "process/ext_person_mention_by_map_person_mention",
          "process/ext_spouse_feature_by_extract_spouse_features"
        ],
        "pipeline/extraction": [
          "process/ext_spouse_candidate",
          "process/ext_num_people",
          "process/ext_person_mention_by_map_person_mention",
          "process/ext_spouse_feature_by_extract_spouse_features"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "articles": {
          "columns": {
            "content": {
              "index": 1,
              "type": "text"
            },
            "id": {
              "index": 0,
              "type": "text"
            }
          }
        },
        "num_people": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "person_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "spouse_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "spouse_feature": {
          "columns": {
            "feature": {
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          }
        }
      },
      "variables": {},
      "variables_": [],
      "variables_byName": {}
    },
    "inference": {
      "factors": {}
    },
    "execution": {
      "processes": {
        "process/init/app": {
          "style": "cmd_extractor",
          "cmd": "\n        deepdive db init\n\n        cd \"$DEEPDIVE_APP\"\n        # run legacy schema.sql\n        if [[ -r schema.sql ]]; then\n            deepdive db prompt <schema.sql\n        fi\n        # run legacy init script\n        if [[ -x input/init.sh ]]; then\n            input/init.sh\n        fi\n        "
        },
        "process/init/relation/articles": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'articles' && deepdive load 'articles'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "articles",
          "output_": "data/articles"
        },
        "process/init/relation/sentences": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'sentences' && deepdive load 'sentences'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "sentences",
          "output_": "data/sentences"
        },
        "process/ext_num_people": {
          "cmd": "\n\n\tdeepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2\nFROM person_mention R0\n        \n        GROUP BY R0.doc_id, R0.sentence_index'\n\t\n        ",
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "person_mention"
          ],
          "output_relation": "num_people",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention"
          ],
          "output_": "data/num_people"
        },
        "process/ext_person_mention_by_map_person_mention": {
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "person_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_person_mention.py",
          "dependencies_": [],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/person_mention"
        },
        "process/ext_spouse_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"spouse_candidate\"\n\tdeepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS \"person_mention.R1.mention_id\", R1.mention_text AS \"person_mention.R1.mention_text\", R2.mention_id AS \"person_mention.R2.mention_id\", R2.mention_text AS \"person_mention.R2.mention_text\"\nFROM num_people R0, person_mention R1, person_mention R2\n        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 5 AND R1.mention_text != R2.mention_text AND R1.begin_index != R2.begin_index'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_num_people",
            "ext_person_mention_by_map_person_mention"
          ],
          "input_relations": [
            "num_people",
            "person_mention"
          ],
          "output_relation": "spouse_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_num_people",
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/num_people",
            "data/person_mention"
          ],
          "output_": "data/spouse_candidate"
        },
        "process/ext_spouse_feature_by_extract_spouse_features": {
          "dependencies": [
            "ext_person_mention_by_map_person_mention"
          ],
          "input": " SELECT R0.mention_id AS \"person_mention.R0.mention_id\", R1.mention_id AS \"person_mention.R1.mention_id\", R0.begin_index AS \"person_mention.R0.begin_index\", R0.end_index AS \"person_mention.R0.end_index\", R1.begin_index AS \"person_mention.R1.begin_index\", R1.end_index AS \"person_mention.R1.end_index\", R0.doc_id AS \"person_mention.R0.doc_id\", R0.sentence_index AS \"person_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM person_mention R0, person_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "person_mention",
            "sentences"
          ],
          "output_relation": "spouse_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_spouse_features.py",
          "dependencies_": [
            "process/ext_person_mention_by_map_person_mention"
          ],
          "input_": [
            "data/person_mention",
            "data/sentences"
          ],
          "output_": "data/spouse_feature"
        }
      }
    }
  }
}
